type MetadataVal = variant {
    TextContent: text;
    BlobContent: blob;
    NatContent: nat;
    Nat8Content: nat8;
    Nat16Content: nat16;
    Nat32Content: nat32;
    Nat64Content: nat64;
};
type MetadataPurpose = variant { Preview; Rendered };
type MetadataKeyVal = record {
    key: text;
    val: MetadataVal;
};
type MetadataPart = record {
    purpose: MetadataPurpose;
    key_val_data: vec MetadataKeyVal;
    data: blob;
};


type MetadataLookupPart = record {
    purpose: MetadataPurpose;
    key_val_data: vec MetadataKeyVal;
    data: blob;
};

type MetadataLookupDesc = vec MetadataLookupPart;

type MetadataDesc = vec MetadataPart;
type Nft = record {
    owner: principal;
    token_id: nat64;
    metadata: MetadataLookupDesc;
    content: vec nat8;
};
type Wallet = record {
    ether: text;
    usdc: text;
    bitcoin: text;
};

// Type for bitcoin wallet of a square
type BitcoinWallet = record {
    bitcoin_address: text;
    bitcoin_balance: nat64;
};

// All information about a square
type SquareProperties = record {
    geohash: text;
    metadata: text;
    wallet: BitcoinWallet;
};

type Geolocation = record { 
    latitude: float64; 
    longitude: float64; 
};
type AreaResponse = record {
    lat_start: float64;
    lon_start: float64;
    lat_end: float64;
    lon_end: float64;
    geohash: text;
    nft_square: opt Nft; 
    created: bool;
};
service : {
    compute_geohash: (Geolocation) -> (text);
    compute_area: (text) -> (text);
}