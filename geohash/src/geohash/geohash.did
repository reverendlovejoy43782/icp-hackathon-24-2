type MetadataVal = variant {
  TextContent: text;
  BlobContent: blob;
  NatContent: nat;
  Nat8Content: nat8;
  Nat16Content: nat16;
  Nat32Content: nat32;
  Nat64Content: nat64;
};

type KeyValRecord = record {
  key: text;
  val: MetadataVal;
};

type MetadataDesc = record {
  purpose: text;
  key_val_data: vec KeyValRecord;
  data: blob;
};

type Nft = record {
  owner: principal;
  token_id: nat64;
  metadata: MetadataDesc;
  content: blob;
};

type Wallet = record {
  ether: text;
  usdc: text;
  bitcoin: text;
};

type SquareProperties = record {
  geohash: text;
  metadata: text;
  wallet: Wallet;
};

type Geolocation = record { 
  latitude: float64; 
  longitude: float64; 
};

type AreaResponse = record {
  lat_start: float64;
  lon_start: float64;
  lat_end: float64;
  lon_end: float64;
  geohash: text;
  nft_square: opt Nft; 
};

service : {
  compute_geohash: (Geolocation) -> (AreaResponse);
  compute_area: (text) -> (AreaResponse);
  mint_nft_with_geohash: (Geolocation) -> (opt Nft);
}